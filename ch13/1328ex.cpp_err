#include <iostream>

using namespace std;

class TreeNode{
public:
	TreeNode(): value("nobody"), count(0), left(new TreeNode()), right(new TreeNode()){}
	TreeNode(string &s, int ct, TreeNode *l, TreeNode *r): value(s), count(ct){*left=*l;*right=*r;}
	TreeNode(const TreeNode& t)
		{value=t.value; count=t.count; *left=*t.left; *right=*t.right;}
	TreeNode& operator=(const TreeNode& t)
		{value=t.value; count=t.count; *left=*t.left; *right=*t.right;return *this;}
	~TreeNode(){delete left; delete right;}

private:
	std::string value;
	int count;
	TreeNode *left;
	TreeNode *right;
};

class BinStrTree{
public:
	BinStrTree():root(new TreeNode()){}
	BinStrTree(const BinStrTree& b){*root = *b.root;}
	BinStrTree& operator=(const BinStrTree& b){*root = *b.root;}
	~BinStrTree(){delete root;}
private:
	TreeNode *root;
};


int main(void)
{
	BinStrTree b;
	return 0;
}
